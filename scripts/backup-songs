#!/usr/bin/env python

import concurrent.futures
import filecmp
import hashlib
import shutil
import os
from pathlib import Path


SOURCE_DIR = "/run/media/noahdominic/Leviathan"
BACKUP_DIR = "/run/media/noahdominic/Mnemosyne"
SONGS_DIR = Path(SOURCE_DIR) / "Studio One" / "Songs"
SONGS_BACKUP_DIR = Path(BACKUP_DIR) / "Studio One" / "Songs"
CHECKSUMS_DIR = Path("~/Documents/Checksums").expanduser()
THEN_CHECKSUMS_DIR = CHECKSUMS_DIR / "then"
NOW_CHECKSUMS_DIR = CHECKSUMS_DIR / "now"
TEMP_CHECKSUMS_DIR = CHECKSUMS_DIR / "temp"


def process_directory(project_dir):
    project_name = os.path.basename(project_dir)
    checksum_file = NOW_CHECKSUMS_DIR / f"checksum_{project_name}"
    prev_checksum_file = THEN_CHECKSUMS_DIR / f"checksum_{project_name}"
    archive_filename = SONGS_BACKUP_DIR / project_name
    print(f"Processing {project_name}")

    with open(checksum_file, "w") as f:
        for root, _, files in os.walk(project_dir):
            for file in files:
                if "Cache" not in root:  # Exclude directories containing "Cache" in their path
                    file_path = os.path.join(root, file)
                    with open(file_path, "rb") as file_obj:
                        md5_hash = hashlib.md5(file_obj.read()).hexdigest()
                        f.write(f"{md5_hash}  {file_path}\n")

    if prev_checksum_file.exists():
        if filecmp.cmp(checksum_file, prev_checksum_file):
            print(f"No changes detected for {project_name}.")
        else:
            print(f"Changes detected for {project_name}. Archiving...")
            shutil.make_archive(archive_filename, 'xztar', project_dir)
    else:
        print(f"Previous checksum file for {project_name} not found. Archiving...")
        shutil.make_archive(archive_filename, 'xztar', project_dir)


def parallel_call_process_directory(project_dir):
    project_dir_path = SONGS_DIR / project_dir
    if project_dir_path.is_dir():
        process_directory(project_dir_path)


def copy_thenchecksums_to_temp():
    for file in THEN_CHECKSUMS_DIR.iterdir():
        shutil.copy(file, TEMP_CHECKSUMS_DIR)


def copy_nowchecksums_to_then():
    for file in NOW_CHECKSUMS_DIR.iterdir():
        shutil.copy(file, THEN_CHECKSUMS_DIR)


def main():
    copy_thenchecksums_to_temp()
    copy_nowchecksums_to_then()

    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        futures = [executor.submit(parallel_call_process_directory, project_dir.name) for project_dir in SONGS_DIR.iterdir()]
        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"Error occurred: {e}")
    print("Archiving of Studio One/Songs, DONE")


if __name__ == "__main__":
    main()
